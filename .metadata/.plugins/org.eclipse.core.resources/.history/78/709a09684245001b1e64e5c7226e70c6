package playingcoffee.core;

public class CPU {

	private final MMU mmu;
	
	private Registers registers;
	
	public CPU(final MMU mmu) {
		this.mmu = mmu;
		
		registers = new Registers();
	}
	
	public Registers getRegisters() {
		return registers;
	}
	
	public void cycle() {
		int opcode = mmu.read(registers.pc++);
		System.out.printf("Fetched opcode: 0x%02x\n", opcode);
		
		// Basic CPU implementation.
		// This will be changed in the future.
		switch (opcode) {
		case 0x00: // NOP
			break;
		
		case 0x21: // LD HL, d16
			registers.writeL(mmu.read(registers.pc++));
			registers.writeH(mmu.read(registers.pc++));
			
			System.out.println(registers.readA());
			break;
			
		case 0x31: // LD SP, d16
			registers.sp = mmu.read(registers.pc++) | (mmu.read(registers.pc++) << 8);
			break;
		
		case 0x32: // LD (HL-), A
			mmu.write(registers.readA(), registers.readHL());
			break;
			
		case 0xAF: // XOR A
			registers.writeA(registers.readA() ^ registers.readA());
			break;
			
		}
	}
}
